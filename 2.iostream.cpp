//#include <iostream>
//
////1. namespace
////	 C++에서는 프로그램을 만들다 보면, 여러 파일이 생성될 수 있고
////	 이로 인해 함수, 구조체 등에서 이름이 겹치는 상황이 발생할 수 있습니다.
////	 함수, 구조체, 변수 등 이름이 같을 경우 오류 발생(이름 충돌 이슈)
//
////   이런 충동 방지를 위해 특정 위치의 함수, 구조체, 변수임을 안내하는 이름 영역(namespace)
////	 가 제공되빈다.
//
////	 C++의 네임스페이스 std는 C++의 표준 라이브러리의 모든 기능에 대한 네임스페이스입니다.
//
////2. obgect(객체)
////	 프로그램에서 데이터와 이를 처리하는 기능(함수)로 구성되어있는 하나의 고유한 값
////	 ex) 세탁기는 다얀한 버튼들과 세탁 기능으로 구성되어 있습니다.
//
//
//int main()
//{
//	//std 네임스페이스에 있는 (::) cout 객체(Obgect)
//	//cout 객체가 가지는 기능
//	//cout C++에서 콘솔 화면에서의 출력 기능을 제공합니다.
//	// <<sms cout 객체에 값을 전달하는 역할을 가진 연산자입니다.(출력 연산자)
//
//	std::cout << "enter your first name : ";
//	
//	//std 네임스페이스에 있는 string 클래스
//	//C언어에서 문자열을 표현할 때 char의 배열로 표현해서 불편한 부분을 수정해
//	//일반적인 자료형처럼 사용할 수 있게 만들어주는 데이터
//	std::string name;
//	std::cin >> name;
//
//	std::cout << "first name :" << name << std::endl;
//	//std::endl은 \n처럼 enter 기능을 수행합니다
//	//단 endl은 출력 버버(임시 저장소)를 비우는 작업이 포함됩니다
//	//이 기능은 \n보다 작업 속도가 느리기 때문에 안정성 문제 가이날면
//	//\n을 사용하는 것을 권장합니다.
//
//	//버퍼(buffer)
//	//임시 메모리 공간을 의미하여, 입력이나 출력 과정에서 바로바로 전달하는
//	//것이 아닌 임시로 보관해뒀다가 내보내는 방식을 의미합니다.
//	
//	//버퍼의 장점
//	//1. 문자 잘못 입력 시 수정 가능
//	//2. 호출을 줄여서 자원 소모를 아낄 수 있습니다.
//
//	//버퍼의 단점
//	//버퍼 또한 데이터 공간이기 때문에, 추가적인 비용을 지불해야 함.
//
//	//컴파일러(complier)
//	//특정 프로그래밍 언어로 쓰여있는 문서를 다른 프로그래밍 언어로 옮기는
//	//언어 번역 프로그램
//	//C언어의 pritf, scnaf와의 차이점
//	//1. C++의 cout 객체는 출력하는 갑에 대한 조사를 컴파일러가 진행할 수 있습니다.
//	//2. cout에서는 컴파일러가 알아서 자료형 판단해서 호출합니다.
//	//3. 처리 속도에서 printf, scnaf가 더 빠릅니다.(이유: coutdms C++의 표준 결과
//	//   동기화가 되어있어 그들을 거쳐서 사용해야 함)
//	return 0;
//}