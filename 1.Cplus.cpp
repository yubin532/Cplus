//#include <iostream>

//1. C++는 C언어의 대부분을 포함하고 있는 확장 언어입니다.
//		 기존의 언어 스타일로 코드를 작성해도 상관 없고,
//		C++에서 추가적으로 제공해주는 기능 상황에 맞게 사용합니다.

//2. C언어에서 제공해주는 함수 대신 C++에서 제공하는 기능을 사용해도
//		됩니다. 단 C언어에서 제공해주는 함수가 C++에서 제공해주는 함수
//		보다 작업 처리 속도가 빠른 경우도 존재합니다.
//		상황에 맞게 두 언어를 적절히 활용합니다.

//3. C++는 객체지향 기능을 지원해주는 언어입니다.
//		기존의 C언어에는 호출 순서에 따라 설계를 하는 절차지향식 언어입니다.
//		C++를 통해 객체 지향식 설계에 대해 학습할 수 있습니다.

//1. 헤더 파일
//C언어에서 사용하던 방식
//#include <stdio.h>와 같이 .h가 명시되어 있음

//C++에서 사용되느 방식
//#incldue <iostream>와 같이 .h가 명시되어있지 않음.

//헤더 파일 구분하기
//1. #include <헤더파일명>은 라이브러리에서 제공해주는 헤더 파일(Windows Kits에서 검색)
//2. #incldue "헤더파일명"은 사용자가 정의한 헤더 파일입니다.(본인 프로젝트 내부에서 검색)

//C++에서 자주 사용할 헤더(라이브러리) 파일
//iostream은 C어어의 stdio.h를 대신해 사용하빈다.(stido.h의 기능에 추가적으로 기능 더 제공)
//algorithm은 특정 알고리즘 구현 시에 필요한 기능을 모아놓은 파일입니다.
//container에서 C++에서 특정 데이터를 표현할 때 사용할 라이브러리에 대한 명칭을 의미합니다.
//ex) vertor, list, map...

//C++의 기본 자료형
//bool, char, int , double

//C++에서 사용할 자료형
//string, container(vactor, list, map...)

//C++ 주소를 다루는 데이터
//배열 in arr[5] = (1,2,3,4,5); (같은 형태의 데이터를 묶음으로 순서대로 표현)
//포인터 int* ptr_arr = arr; (주소 값을 가리키는 변수)
//참조자 int& ref_arr = arr[0]; (특정 값을 참조하는 기능)


//int main()
//{
//	return 0;
//}